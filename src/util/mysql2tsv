#!/bin/sh
#
# Fetch a SQL result from MySQL/MariaDB
# and store it in TSV format
# without extra carriage returns and newlines,
# and replacing NULL with the empty string.
# Uses the `mysql --quick` streaming option.
# Uses `sed` and `qsv` for formatting.
# Requires environment variables to be set:
# MYSQL_HOST MYSQL_PORT MYSQL_USER MYSQL_PASSWORD MYSQL_DATABASE
#
# Example: ./mysql2tsv "SELECT * FROM epitope ORDER BY epitope_id" iedb/epitope.tsv

usage() {
  echo 'Usage: mysql2tsv QUERY TSV_FILE'
  echo '  QUERY can be a MySQL/MariaDB query string or file'
  echo ''
  echo 'These environment variables must be set:'
  echo '  IEDB_MYSQL_HOST'
  echo '  IEDB_MYSQL_PORT'
  echo '  IEDB_MYSQL_USER'
  echo '  IEDB_MYSQL_PASSWORD'
  echo '  IEDB_MYSQL_DATABASE'
}

# Define fail to print usage
fail() {
  echo "ERROR: $1"
  usage
  exit 1
}

if [ -z "$1" ]; then fail 'Please provide a MySQL query or file to run'; fi
if [ -z "$2" ]; then fail 'Please provide a TSV file to write'; fi

MYSQL_QUERY="$1"
TSV_FILE="$2"
TEMP_FILE="$2.tmp"

if [ -z "${IEDB_MYSQL_HOST}" ]; then fail 'Please set IEDB_MYSQL_HOST'; fi
if [ -z "${IEDB_MYSQL_PORT}" ]; then fail 'Please set IEDB_MYSQL_PORT'; fi
if [ -z "${IEDB_MYSQL_USER}" ]; then fail 'Please set IEDB_MYSQL_USER'; fi
if [ -z "${IEDB_MYSQL_PASSWORD}" ]; then fail 'Please set IEDB_MYSQL_PASSWORD'; fi
if [ -z "${IEDB_MYSQL_DATABASE}" ]; then fail 'Please set IEDB_MYSQL_DATABASE'; fi

# Redefine fail so that it does not print usage
fail() {
  echo "ERROR: $1"
  exit 1
}

# Maybe read query from file
if [ -f "${MYSQL_QUERY}" ]; then
  MYSQL_QUERY=$(cat "${MYSQL_QUERY}")
fi

command -v qsv > /dev/null || PATH="bin:$PATH"
command -v qsv > /dev/null || fail 'Please install qsv'

mysql \
  --host="${IEDB_MYSQL_HOST}" \
  --port="${IEDB_MYSQL_PORT}" \
  --user="${IEDB_MYSQL_USER}" \
  --password="${IEDB_MYSQL_PASSWORD}" \
  "${IEDB_MYSQL_DATABASE}" \
  --execute "${MYSQL_QUERY}" \
  --quick \
> "${TEMP_FILE}"

# Remove carriage returns, newlines, and NULLs.
sed "s/\r//g" "${TEMP_FILE}" \
| sed "s/\n/ /g" \
| qsv replace --quiet \
  --delimiter '\t' \
  --output "${TSV_FILE}" \
  'NULL' '' \
|| true # ignore qsv replace errors

rm -f "${TSV_FILE}.tmp"
